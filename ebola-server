#!/usr/bin/env python3
"""Start the ebola server

Usage:
ebola-server set-configuration <name>
ebola-server vault-login [--refresh]
ebola-server create-orderly-volume [--remove] <path>
ebola-server start
ebola-server stop
ebola-server configure
ebola-server update-passwords
ebola-server status
"""


import os
import os.path
import sys

import docopt

CONFIG_FILE = "conf/default.json"
VAULT_TOKEN = ".vault_token"


def set_configuration(root, name):
    print("Setting configuration to: {}".format(name))
    dest = "{}.json".format(name)
    dest_full = os.path.join(root, "conf", dest)
    config_full = os.path.join(root, CONFIG_FILE)
    if not os.path.exists(dest_full):
        raise Exception("Configuration does not exist: " + dest_full)
    if os.path.exists(config_full):
        print("...removing previous configuration")
        os.remove(config_full)
    os.symlink(dest, config_full)
    print("...OK")


def start(root, name):
    deploy.start(os.path.join(root, CONFIG_FILE))


def stop(root):
    deploy.stop(os.path.join(root, CONFIG_FILE))


def configure(root):
    s = deploy.get_service(os.path.join(root, CONFIG_FILE))
    deploy.configure(s)


def update_passwords(root):
    s = deploy.get_service(os.path.join(root, CONFIG_FILE))
    deploy.configure_proxy_users(s)


def status(root):
    s = deploy.get_service(os.path.join(root, CONFIG_FILE))
    st = s.status
    print(st if st else "not running")


def vault_login(root, refresh):
    import service
    load_vault_token(root)
    vault = service.get_vault(refresh)
    path_vault_token = os.path.join(root, VAULT_TOKEN)
    print("Saving vault token to {}".format(path_vault_token))
    with open(path_vault_token, "w") as f:
        f.write(vault.token)


def create_orderly_volume(root, path, remove):
    import util
    s = deploy.get_service(os.path.join(root, CONFIG_FILE))
    dest = s.volume_name("orderly")
    util.directory_to_volume(path, dest, s.client, remove)


def load_vault_token(root):
    path_vault_token = os.path.join(root, VAULT_TOKEN)
    if os.path.exists(path_vault_token):
        print("Loading vault token from {}".format(path_vault_token))
        with open(path_vault_token, "r") as f:
            os.environ["VAULT_TOKEN"] = f.read().strip()


if __name__ == "__main__":
    args = docopt.docopt(__doc__)
    root = os.path.dirname(sys.argv[0])

    sys.path.insert(1, os.path.join(root, "src"))
    import deploy

    if args["set-configuration"]:
        set_configuration(root, args["<name>"])
    elif args["vault-login"]:
        vault_login(root, args["--refresh"])
    else:
        if not os.path.exists(os.path.join(root, CONFIG_FILE)):
            sys.exit("ERROR: Set a configuration with set-configuration first")

        if args["start"]:
            load_vault_token(root)
            start(root, args)
        elif args["stop"]:
            stop(root)
        elif args["update-passwords"]:
            load_vault_token(root)
            update_passwords(root)
        elif args["configure"]:
            load_vault_token(root)
            configure(root)
        elif args["status"]:
            status(root)
        elif args["create-orderly-volume"]:
            create_orderly_volume(root, args["<path>"], args["--remove"])

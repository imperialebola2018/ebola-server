#!/usr/bin/env python3
"""Start the ebola server

Usage:
ebola-server set-configuration <name>
ebola-server vault-login [--refresh]
ebola-server import-orderly-volume [--verbose] [--remove] [--update] <path>
ebola-server export-orderly-volume [--verbose] <path>
ebola-server start
ebola-server stop
ebola-server configure
ebola-server update-passwords
ebola-server status
ebola-server backup [--verbose] <path>
ebola-server restore [--verbose] <path>
"""


import os
import os.path
import sys

import docopt

CONFIG_FILE = "conf/default.json"
VAULT_TOKEN = ".vault_token"


def set_configuration(root, name):
    print("Setting configuration to: {}".format(name))
    dest = "{}.json".format(name)
    dest_full = os.path.join(root, "conf", dest)
    config_full = os.path.join(root, CONFIG_FILE)
    if not os.path.exists(dest_full):
        raise Exception("Configuration does not exist: " + dest_full)
    if os.path.exists(config_full):
        print("...removing previous configuration")
        os.remove(config_full)
    os.symlink(dest, config_full)
    print("...OK")


def start():
    deploy.start(CONFIG_FILE)


def stop():
    deploy.stop(CONFIG_FILE)


def configure():
    s = deploy.get_service(CONFIG_FILE)
    deploy.configure(s)


def update_passwords():
    s = deploy.get_service(CONFIG_FILE)
    deploy.configure_proxy_users(s)


def status():
    s = deploy.get_service(CONFIG_FILE)
    st = s.status
    print(st if st else "not running")


def vault_login(root, refresh):
    import service
    load_vault_token(root)
    vault = service.get_vault(refresh)
    path_vault_token = os.path.join(root, VAULT_TOKEN)
    print("Saving vault token to {}".format(path_vault_token))
    with open(path_vault_token, "w") as f:
        f.write(vault.token)


def import_orderly_volume(root, path, verbose, remove, update):
    import util
    s = deploy.get_service(os.path.join(root, CONFIG_FILE))
    dest = s.volume_name("orderly")
    util.volume_import(path, dest, s.client, verbose, remove, update)


def export_orderly_volume(root, path, verbose):
    import util
    s = deploy.get_service(os.path.join(root, CONFIG_FILE))
    src = s.volume_name("orderly")
    util.volume_export(src, path, s.client, verbose)


def load_vault_token(root):
    path_vault_token = os.path.join(root, VAULT_TOKEN)
    if os.path.exists(path_vault_token):
        with open(path_vault_token, "r") as f:
            os.environ["VAULT_TOKEN"] = f.read().strip()


def require_config(root):
    if not os.path.exists(os.path.join(root, CONFIG_FILE)):
        sys.exit("ERROR: Set a configuration with set-configuration first")
    load_vault_token(root)


## This is pretty bad, but should suffice in the short term
def backup(root, path, verbose):
    import util
    s = deploy.get_service(os.path.join(root, CONFIG_FILE))
    os.mkdir(path)
    path_orderly_tar = os.path.join(path, "orderly.tar.gz")
    path_db_tar = os.path.join(path, "db.tar.gz")
    util.volume_export(s.volume_name("orderly"), path_orderly_tar,
                       s.client, verbose)
    print("!!! Taking down database container")
    s.db.pause()
    try:
        util.volume_export(s.volume_name("db"), path_db_tar, s.client, verbose)
    finally:
        print("!!! Resuming database container")
        s.db.unpause()
        print("...OK")


def restore(root, path, verbose):
    import util
    s = deploy.get_service(os.path.join(root, CONFIG_FILE))
    if s.status:
        raise Exception("Service must be stopped!")
    path_orderly_tar = os.path.join(path, "orderly.tar.gz")
    path_db_tar = os.path.join(path, "db.tar.gz")
    if not os.path.exists(path_orderly_tar):
        raise Exception("Expected file '{}'".format(path_orderly_tar))
    if not os.path.exists(path_db_tar):
        raise Exception("Expected file '{}'".format(path_db_tar))
    util.volume_import(path_orderly_tar, s.volume_name("orderly"),
                       s.client, verbose, True, False)
    util.volume_import(path_db_tar, s.volume_name("db"),
                       s.client, verbose, True, False)


if __name__ == "__main__":
    args = docopt.docopt(__doc__)
    root = os.path.dirname(sys.argv[0])

    sys.path.insert(1, os.path.join(root, "src"))
    import deploy

    if args["set-configuration"]:
        set_configuration(root, args["<name>"])
    elif args["vault-login"]:
        vault_login(root, args["--refresh"])
    elif args["import-orderly-volume"]:
        require_config(root)
        import_orderly_volume(root, args["<path>"], args["--verbose"],
                              args["--remove"], args["--update"])
    elif args["export-orderly-volume"]:
        require_config(root)
        export_orderly_volume(root, args["<path>"], args["--verbose"])
    elif args["backup"]:
        require_config(root)
        backup(root, args["<path>"], args["--verbose"])
    elif args["restore"]:
        require_config(root)
        restore(root, args["<path>"], args["--verbose"])
    else:
        require_config(root)
        os.chdir(root)
        if args["start"]:
            start()
        elif args["stop"]:
            stop()
        elif args["update-passwords"]:
            update_passwords()
        elif args["configure"]:
            configure()
        elif args["status"]:
            status()
        else:
            raise Exception("Unknown command")
